import{d as g}from"./daysOfWeek-C19XqJ9X.js";import{N as k,a as f,_ as w}from"./utils-oZnrSTRW.js";import{i as S}from"./index-BZP-VYtB.js";import{c as r,o as h,d as u,F as m,a as D,n as y,t as N,l as O,x as T,w as p}from"./vue-vendor-DIMlJxEK.js";const d={UNLOCK_WIDTH:"Odblokuj szerokość",LOCK_WIDTH:"Zablokuj szerokość",CLICK_TO_EDIT:"Kliknij aby edytować zmianę",INVALID_VALUE:"Zła wartość! Tylko 'D', 'N', lub 'D N' są dozwolone.",TWO_RATOWNIK_DAY:"Nie można przypisać dwóch ratowników na zmianę dzienną.",TWO_RATOWNIK_NIGHT:"Nie można przypisać dwóch ratowników na zmianę nocną.",MAX_DAY_PEOPLE:"Nie można przypisać więcej niż dwóch osób na zmianę dzienną.",MAX_NIGHT_PEOPLE:"Nie można przypisać więcej niż dwóch osób na zmianę nocną.",LOAD_ERROR:"Nie udało się załadować danych lokalnych. Sprawdź konsolę.",NOT_ASSIGNED:"Not assigned"},P=[{value:"",label:""},{value:"D",label:"D"},{value:"N",label:"N"},{value:"D N",label:"D N"}],A=["D","N","D N",""],E=31,C=["dayShift1","dayShift2","nightShift1","nightShift2"],_=["Milena","Mikołaj","Aleksandra","Joanna","Łukasz","Natalia","Marcin"],M={name:"SpreadsheetView",emits:["update-editing-mode","has-changes","month-days-updated"],props:{isEditingMode:{type:Boolean,required:!0},selectedMonth:{type:Number,required:!0},selectedYear:{type:Number,required:!0},people:{type:Array,required:!0}},components:{NotificationMessage:k},data(){return{editedShifts:{},monthDays:[],localData:{},daysOfWeek:g,madeChanges:!1,scrollContainer:null,isFirstColumnLocked:!1,importedCells:new Set,SHIFT_OPTIONS:P,MESSAGES:d}},computed:{daysInMonth(){return this.monthDays.map(e=>e.date.getDate())},orderedPeople(){return this.people.filter(e=>_.includes(e.name)).sort((e,t)=>_.indexOf(e.name)-_.indexOf(t.name))},lockButtonTooltip(){return this.isFirstColumnLocked?d.UNLOCK_WIDTH:d.LOCK_WIDTH},editCellAriaLabel(){return this.isEditingMode?d.CLICK_TO_EDIT:""},editCellTitle(){return this.isEditingMode?d.CLICK_TO_EDIT:""}},watch:{selectedMonth(){this.generateMonthDays()},selectedYear(){this.generateMonthDays()}},methods:{isEditing(e,t){return this.editedShifts.hasOwnProperty(`${e}-${t}`)},getShiftForPersonAndDay(e,t){const i=this.monthDays.find(n=>n.date.getDate()===t)?.date.toDateString(),o=localStorage.getItem(i);if(o){const n=JSON.parse(o),a=[];return(n.dayShift1===e||n.dayShift2===e)&&a.push("D"),(n.nightShift1===e||n.nightShift2===e)&&a.push("N"),a.join(" ")}return null},editCell(e,t){if(this.isEditingMode){const i=`${e}-${t}`,o=this.getShiftForPersonAndDay(e,t)||"";this.editedShifts[i]=o}},validateShiftValue(e){const t=e?.trim().toUpperCase()||"";return A.includes(t)?t:null},clearPersonFromAllShifts(e,t){C.forEach(i=>{e[i]===t&&(e[i]=null,e[i+"Name"]=d.NOT_ASSIGNED,e[i+"UserChanged"]=!0)})},validateRatownikAssignment(e,t,i){return this.people.find(n=>n.id===t)?.ratownik?i.includes("D")&&[e.dayShift1,e.dayShift2].filter(Boolean).some(s=>this.people.find(c=>c.id===s)?.ratownik&&s!==t)?(f(d.TWO_RATOWNIK_DAY,"red"),!1):i.includes("N")&&[e.nightShift1,e.nightShift2].filter(Boolean).some(s=>this.people.find(c=>c.id===s)?.ratownik&&s!==t)?(f(d.TWO_RATOWNIK_NIGHT,"red"),!1):!0:!0},assignPersonToShift(e,t,i){const o=this.people.find(n=>n.id===t);return e[i]?!1:(e[i]=t,e[i+"Name"]=o.name,e[i+"UserChanged"]=!0,!0)},assignDayShift(e,t){return this.assignPersonToShift(e,t,"dayShift1")||this.assignPersonToShift(e,t,"dayShift2")?!0:(f(d.MAX_DAY_PEOPLE,"red"),!1)},assignNightShift(e,t){return this.assignPersonToShift(e,t,"nightShift1")||this.assignPersonToShift(e,t,"nightShift2")?!0:(f(d.MAX_NIGHT_PEOPLE,"red"),!1)},saveShiftData(e,t){const i={dayShift1:e.dayShift1,dayShift2:e.dayShift2,nightShift1:e.nightShift1,nightShift2:e.nightShift2,dayShift1Name:e.dayShift1Name,dayShift2Name:e.dayShift2Name,nightShift1Name:e.nightShift1Name,nightShift2Name:e.nightShift2Name};this.localData[t]=i,localStorage.setItem(t,JSON.stringify(i)),this.madeChanges=!0,this.$emit("has-changes",this.madeChanges)},saveShift(e,t){const i=`${e}-${t}`,o=this.validateShiftValue(this.editedShifts[i]),n=this.getShiftForPersonAndDay(e,t)||"";if(o===null){f(d.INVALID_VALUE,"red"),this.$nextTick(()=>{this.editedShifts[i]=n});return}const a=this.getDateString(t);if(!a)return;const s=this.findDayByDate(a);if(!s)return;if(this.clearPersonFromAllShifts(s,e),o===""){this.saveShiftData(s,a),this.$nextTick(()=>{delete this.editedShifts[i],this.$forceUpdate()});return}if(!this.validateRatownikAssignment(s,e,o)){delete this.editedShifts[i];return}let l=!0;if(o.includes("D")&&(l=this.assignDayShift(s,e)),l&&o.includes("N")&&(l=this.assignNightShift(s,e)),!l){delete this.editedShifts[i];return}this.saveShiftData(s,a),delete this.editedShifts[i]},generateMonthDays(){this.resetUserChanges();const e=this.selectedYear,t=this.selectedMonth,i=new Date(e,t+1,0).getDate();this.monthDays=[];for(let o=1;o<=i;o++)this.monthDays.push({date:new Date(e,t,o),dayShift1:null,dayShift2:null,nightShift1:null,nightShift2:null,dayShift1Name:"Not assigned",dayShift2Name:"Not assigned",nightShift1Name:"Not assigned",nightShift2Name:"Not assigned",isCurrentMonth:!0});this.loadFromLocalStorage(),this.$emit("month-days-updated",this.monthDays)},updateChanges(e){this.madeChanges=e,this.$emit("has-changes",this.madeChanges)},loadFromLocalStorage(){const{year:e,month:t}={year:this.selectedYear,month:this.selectedMonth};for(let i=1;i<=E;i++)this.loadDayFromStorage(e,t,i)},loadDayFromStorage(e,t,i){const o=new Date(e,t,i).toDateString(),n=localStorage.getItem(o);if(n)try{const a=JSON.parse(n),s=this.findDayByDate(o);s&&this.applyStoredStatesToDay(s,a)}catch(a){console.error("Failed to load local data:",a),f(d.LOAD_ERROR,"red")}},applyStoredStatesToDay(e,t){C.forEach(i=>{e[i]=t[i],e[i+"Name"]=t[i+"Name"]||d.NOT_ASSIGNED})},resetUserChanges(){this.clearUserChangesFromStorage(),this.localData={},this.editedShifts={},this.madeChanges=!1,this.$emit("has-changes",this.madeChanges)},clearUserChangesFromStorage(){const e=[];for(const t in localStorage)if(!(t==="isEditingMode"||t==="currentPage")&&localStorage.hasOwnProperty(t))try{const i=JSON.parse(localStorage.getItem(t)||"{}");C.some(n=>i[n+"UserChanged"])&&e.push(t)}catch{continue}e.forEach(t=>localStorage.removeItem(t))},isToday(e){const t=new Date;return e.getDate()===t.getDate()&&e.getMonth()===t.getMonth()&&e.getFullYear()===t.getFullYear()},isImportedCell(e,t){return this.importedCells.has(`${e}-${t}`)},toggleColumnsLocked(){this.isFirstColumnLocked=!this.isFirstColumnLocked,this.$nextTick(()=>{document.querySelectorAll(".calendar-table th:first-child, .calendar-table td:first-child").forEach(t=>{this.isFirstColumnLocked?t.classList.add("column-locked"):t.classList.remove("column-locked")})})},isHoliday(e){return S(e)},getHeaderCellClasses(e){const t=new Date(this.selectedYear,this.selectedMonth,e);return{"nd-color":g[t.getDay()]==="Nd","sob-color":g[t.getDay()]==="Sob","holiday-color":S(t).isHoliday,"today-column":this.isToday(t)}},getPersonCellClasses(e){return{ratownik:e.ratownik,pielegniarka:!e.ratownik}},getDataCellClasses(e){const t=new Date(this.selectedYear,this.selectedMonth,e);return{"nd-color":g[t.getDay()]==="Nd","sob-color":g[t.getDay()]==="Sob","holiday-color":S(t).isHoliday,today:this.isToday(t)}},getHolidayTooltip(e){const t=new Date(this.selectedYear,this.selectedMonth,e);return S(t).name||""},findDayByDate(e){return this.monthDays.find(t=>t.date.toDateString()===e)},getDateString(e){return this.monthDays.find(t=>t.date.getDate()===e)?.date.toDateString()},handleScroll(e){this.scrollContainer&&(e.preventDefault(),this.scrollContainer.scrollLeft+=e.deltaY)}},mounted(){this.resetUserChanges(),this.generateMonthDays(),this.scrollContainer=this.$refs.scrollContainer}},L={class:"spreadsheet-view"},v={class:"calendar-table"},b=["title"],I={xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",width:"24",height:"24",fill:"none",stroke:"white","stroke-width":"2"},F={key:0,d:"M12 3a4 4 0 0 0-4 4v4h8V7a4 4 0 0 0-4-4z"},H={key:1,d:"M8 11V7a4 4 0 0 1 8 0"},R=["title","aria-label"],U=["onClick","aria-label","title"],z=["onUpdate:modelValue","onChange"],V=["value"];function Y(e,t,i,o,n,a){return h(),r("div",L,[u("div",{class:"scrollable-container",onWheel:t[1]||(t[1]=p((...s)=>a.handleScroll&&a.handleScroll(...s),["prevent"])),ref:"scrollContainer"},[u("table",v,[u("thead",null,[u("tr",null,[u("th",null,[u("button",{class:"lock-column-button",onClick:t[0]||(t[0]=(...s)=>a.toggleColumnsLocked&&a.toggleColumnsLocked(...s)),title:a.lockButtonTooltip},[(h(),r("svg",I,[t[2]||(t[2]=u("rect",{x:"7",y:"11",width:"10",height:"10",rx:"1"},null,-1)),n.isFirstColumnLocked?(h(),r("path",F)):(h(),r("path",H))]))],8,b)]),(h(!0),r(m,null,D(a.daysInMonth,s=>(h(),r("th",{key:s,class:y(a.getHeaderCellClasses(s)),title:a.getHolidayTooltip(s),"aria-label":a.getHolidayTooltip(s)},N(s),11,R))),128))])]),u("tbody",null,[(h(!0),r(m,null,D(a.orderedPeople,s=>(h(),r("tr",{key:s.id},[u("td",{class:y(a.getPersonCellClasses(s))},N(s.name),3),(h(!0),r(m,null,D(a.daysInMonth,l=>(h(),r("td",{key:l,class:y(["editable-cell",a.getDataCellClasses(l)]),onClick:c=>a.editCell(s.id,l),"aria-label":a.editCellAriaLabel,title:a.editCellTitle,role:"gridcell"},[!i.isEditingMode||!a.isEditing(s.id,l)?(h(),r("span",{key:0,class:y({"imported-cell":a.isImportedCell(s.id,l)})},N(a.getShiftForPersonAndDay(s.id,l)||""),3)):O((h(),r("select",{key:1,"onUpdate:modelValue":c=>n.editedShifts[`${s.id}-${l}`]=c,onChange:c=>a.saveShift(s.id,l)},[(h(!0),r(m,null,D(n.SHIFT_OPTIONS,c=>(h(),r("option",{key:c.value,value:c.value},N(c.label),9,V))),128))],40,z)),[[T,n.editedShifts[`${s.id}-${l}`]]])],10,U))),128))]))),128))])])],544)])}const G=w(M,[["render",Y],["__scopeId","data-v-d94b144d"]]);export{G as default};
